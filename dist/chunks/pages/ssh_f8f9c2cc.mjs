/* empty css                          */import { a as createComponent, r as renderTemplate, e as renderComponent, u as unescapeHTML } from '../astro_71295d57.mjs';
import 'clsx';
import { $ as $$BlogPost } from './bedrock-linux_cd29f8c0.mjs';

const html = "<hr>\n<h2 id=\"title-ssh-keysdate-2022-07-09\">title: ssh keys\ndate: 2022-07-09</h2>\n<h1 id=\"ssh\">SSH</h1>\n<blockquote>\n<p>SSH is a tool we all (might not) know and love, but configuring can be a bit tedious. That’s where I try to help you with my guide.</p>\n</blockquote>\n<h3 id=\"lets-make-some-keys\">Let’s make some keys:</h3>\n<p>Run the following code on the computer you will use to connect to your server:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">ssh-keygen</span></span></code></pre>\n<p>After this, please make a backup to a USB drive or something (or at least back up your <code>.ssh</code> directory). Store this securely, since this will be the access key to your server.</p>\n<p>Now, let’s copy the key to your server:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">ssh-copy-id</span><span style=\"color:#9ECBFF\"> root@yourdomain.tld</span></span></code></pre>\n<p>Now, your should be able to log in to your server without a password, try logging in:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">ssh</span><span style=\"color:#9ECBFF\"> root@yourdomain.tld</span></span></code></pre>\n<p>If that works, you’re good!</p>\n<p>Otherwise, try this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">chmod</span><span style=\"color:#79B8FF\"> 700</span><span style=\"color:#9ECBFF\"> ~/.ssh/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">chmod</span><span style=\"color:#79B8FF\"> 644</span><span style=\"color:#9ECBFF\"> ~/.ssh/id_rsa.pub</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">chmod</span><span style=\"color:#79B8FF\"> 600</span><span style=\"color:#9ECBFF\"> ~/.ssh/id_rsa</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">chmod</span><span style=\"color:#79B8FF\"> 644</span><span style=\"color:#9ECBFF\"> ~/.ssh/authorized_keys</span></span></code></pre>\n<h3 id=\"now-lets-log-into-the-server-and-edit-the-configuration-file-etcsshsshd_config\">Now let’s log into the server and edit the configuration file (/etc/ssh/sshd_config)</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">sudo</span><span style=\"color:#9ECBFF\"> nvim</span><span style=\"color:#9ECBFF\"> /etc/ssh/sshd_config</span></span></code></pre>\n<p>Find the following lines, and make sure they’re are at these values.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>UsePAM no</span></span>\n<span class=\"line\"><span>ChallengeResponseAuthentication no</span></span>\n<span class=\"line\"><span>PasswordAuthentication no</span></span>\n<span class=\"line\"><span>Port 10018</span></span></code></pre>\n<p>Let’s reload the SSH configuration on the server to see if everything is working as expected, type:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span>systemctl reload sshd</span></span></code></pre>\n<p>You should validate that everything is working by opening a new terminal window, and checking if you can SSH into your server without issues. If that works, you’re golden. Otherwise, don’t log out and check your failure. searching online helps too :)! You should use the “-p 10018” flag to indicate that we want to use port 10018.\nClient side</p>\n<p>The things you do on your local machine.</p>\n<p>Make a file called “config” in the ”~/.ssh” directory.</p>\n<p>You are now able to enter the following content (with your server details of course)</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B392F0\">Host</span><span style=\"color:#9ECBFF\"> server</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  HostName</span><span style=\"color:#9ECBFF\"> yourdomain.tld</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  User</span><span style=\"color:#9ECBFF\"> root</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  IdentityFile</span><span style=\"color:#9ECBFF\"> ~/.ssh/id_rsa</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  Port</span><span style=\"color:#79B8FF\"> 10018</span></span></code></pre>\n<p>If you’ve done this correctly, (and I didn’t make any errors whilst making this post) you can now log into your server using ssh server.</p>";

				const frontmatter = {"layout":"../../layouts/blogPost.astro","title":"SSH quickstart key configuration","pubDate":"2023-08-14T00:00:00.000Z","description":"A little dive into SSH and keys etc","author":"Ahwx"};
				const file = "/home/liv/Development/ahwx.org/src/pages/blog/ssh.md";
				const url = "/blog/ssh";
				function rawContent() {
					return "\n---\ntitle: ssh keys\ndate: 2022-07-09\n---\n\n# SSH\n> SSH is a tool we all (might not) know and love, but configuring can be a bit tedious. That's where I try to help you with my guide.\n\n### Let's make some keys:\n\nRun the following code on the computer you will use to connect to your server:\n\n```sh\nssh-keygen\n```\n\nAfter this, please make a backup to a USB drive or something (or at least back up your `.ssh` directory). Store this securely, since this will be the access key to your server.\n\nNow, let's copy the key to your server:\n\n```sh\nssh-copy-id root@yourdomain.tld\n```\n\nNow, your should be able to log in to your server without a password, try logging in:\n\n```sh\nssh root@yourdomain.tld\n```\n\nIf that works, you're good!\n\nOtherwise, try this:\n\n```sh\nchmod 700 ~/.ssh/\nchmod 644 ~/.ssh/id_rsa.pub\nchmod 600 ~/.ssh/id_rsa\nchmod 644 ~/.ssh/authorized_keys\n```\n\n### Now let's log into the server and edit the configuration file (/etc/ssh/sshd_config)\n\n```sh\nsudo nvim /etc/ssh/sshd_config\n```\n\nFind the following lines, and make sure they're are at these values.\n\n```\nUsePAM no\nChallengeResponseAuthentication no\nPasswordAuthentication no\nPort 10018\n```\n\nLet's reload the SSH configuration on the server to see if everything is working as expected, type:\n\n```\nsystemctl reload sshd\n```\n\nYou should validate that everything is working by opening a new terminal window, and checking if you can SSH into your server without issues. If that works, you're golden. Otherwise, don't log out and check your failure. searching online helps too :)! You should use the \"-p 10018\" flag to indicate that we want to use port 10018.\nClient side\n\nThe things you do on your local machine.\n\nMake a file called \"config\" in the \"~/.ssh\" directory.\n\nYou are now able to enter the following content (with your server details of course)\n\n```sh\nHost server\n  HostName yourdomain.tld\n  User root\n  IdentityFile ~/.ssh/id_rsa\n  Port 10018\n```\n\nIf you've done this correctly, (and I didn't make any errors whilst making this post) you can now log into your server using ssh server.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"title-ssh-keysdate-2022-07-09","text":"title: ssh keys\ndate: 2022-07-09"},{"depth":1,"slug":"ssh","text":"SSH"},{"depth":3,"slug":"lets-make-some-keys","text":"Let’s make some keys:"},{"depth":3,"slug":"now-lets-log-into-the-server-and-edit-the-configuration-file-etcsshsshd_config","text":"Now let’s log into the server and edit the configuration file (/etc/ssh/sshd_config)"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogPost, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
